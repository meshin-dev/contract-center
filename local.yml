version: '3'

volumes:
  contract_center_local_postgres_data: {}
  contract_center_local_postgres_data_backups: {}

services:
  django: &django
    tty: true
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: contract_center_local_django
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/app:z
    env_file:
      - ./.envs/.local/.django
      - ./.env
    ports:
      - '$DJANGO_PORT:8000'
    command: /start

  postgres:
    tty: true
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: contract_center_local_postgres
    hostname: contract_center_local_postgres
    volumes:
      - contract_center_local_postgres_data:/var/library/postgresql/data
      - contract_center_local_postgres_data_backups:/backups
    env_file:
      - ./.env
    environment:
      - "POSTGRES_DB=${POSTGRES_DB}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}"
      - "POSTGRES_USER=${POSTGRES_USER}"
      - "POSTGRES_PORT=${POSTGRES_PORT}"
    ports:
      - '$POSTGRES_PORT:$POSTGRES_PORT'
    command: -p $POSTGRES_PORT

  docs:
    tty: true
    image: contract_center_local_docs
    build:
      context: .
      dockerfile: ./compose/local/docs/Dockerfile
    env_file:
      - ./.envs/.local/.django
      - ./.env
    volumes:
      - ./docs:/docs:z
      - ./config:/app/config:z
      - ./contract_center:/app/contract_center:z
    ports:
      - '$DOCS_PORT:9000'
    command: /start-docs

  redis:
    image: redis:6

  live_events_listener:
    <<: *django
    image: contract_center_local_live_events_listener
    depends_on:
      - redis
      - postgres
    ports: []
    command: /start-live-events-listener

  worker_events_fetch:
    <<: *django
    image: contract_center_local_worker_events_fetch
    depends_on:
      - redis
      - postgres
    ports: []
    command: /start-celeryworker --worker-name=events_fetch --concurrency=4

  worker_events_process:
    <<: *django
    image: contract_center_local_worker_events_process
    depends_on:
      - redis
      - postgres
    ports: []
    command: /start-celeryworker --worker-name=events_process --concurrency=4

  worker_events_webhooks:
    <<: *django
    image: contract_center_local_worker_events_webhooks
    depends_on:
      - redis
      - postgres
    ports: []
    command: /start-celeryworker --worker-name=webhooks --concurrency=10

  celerybeat:
    <<: *django
    image: contract_center_local_celerybeat
    depends_on:
      - redis
      - postgres
    ports: []
    command: /start-celerybeat

  flower:
    <<: *django
    image: contract_center_local_flower
    ports:
      - '$FLOWER_PORT:5555'
    command: /start-flower

#  node:
#    tty: true
#    build:
#      context: .
#      dockerfile: ./compose/local/node/Dockerfile
#    image: contract_center_local_node
#    depends_on:
#      - django
#    volumes:
#      - .:/app:z
#      # http://jdlm.info/articles/2016/03/06/lessons-building-node-app-docker.html
#      - /app/node_modules
#    command: npm run dev
#    ports:
#      - '3000:3000'
#      # Expose browsersync UI: https://www.browsersync.io/docs/options/#option-ui
#      - '3001:3001'

  adminer:
    image: adminer:latest
    hostname: contract_center_local_adminer
    container_name: contract_center_local_adminer
    env_file:
      - ./.env
    ports:
      - '$ADMINER_EXTERNAL_PORT:$ADMINER_PORT'
    environment:
      - "ADMINER_PLUGINS=tables-filter tinymce"
      - "ADMINER_DESIGN=dracula"
